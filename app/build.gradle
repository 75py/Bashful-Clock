// Fabric Crashlytics
buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        // These docs use an open ended version so that our plugin
        // can be updated quickly in response to Android tooling updates

        // We recommend changing it to the latest version from our changelog:
        // https://docs.fabric.io/android/changelog.html#fabric-gradle-plugin
        classpath 'io.fabric.tools:gradle:1.27.0'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'deploygate'
apply plugin: 'io.fabric'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'

apply from: '../release.gradle', to: android

android {
    compileSdkVersion 28

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    defaultConfig {
        applicationId "com.nagopy.android.bashfulclock"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode publish_version_code
        versionName publish_version_name
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [fabric_api_key: properties.getProperty("FABRIC_API_KEY", System.getenv("FABRIC_API_KEY"))]
        multiDexEnabled true
    }
    buildTypes {
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            buildConfigField "long", "REMOTE_CONFIG_FETCH_INTERVAL", (15 * 60 * 1500).toString() // 15m
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField "long", "REMOTE_CONFIG_FETCH_INTERVAL", (3 * 60 * 60 * 1500).toString() // 3h
        }
    }
    signingConfigs {
        debug {
            keyAlias "androiddebugkey"
            keyPassword "android"
            storeFile file("../debug.keystore")
            storePassword "android"
        }
    }
    flavorDimensions "default"
    productFlavors {
        dev {
            resConfigs "en", "ja"
            applicationIdSuffix = ".dev"
        }
        pro {
        }
    }
    dataBinding {
        enabled = true
    }
    testOptions.unitTests.includeAndroidResources = true
    lintOptions {
        abortOnError false
    }
}

deploygate {
    appOwnerName = System.getenv('DEPLOYGATE_USER_NAME')
    apiToken = System.getenv('DEPLOYGATE_API_TOKEN')

    deployments {
        devUniversalApkOfAab {
            sourceFile = file("${project.rootDir}/app/build/from-aab/app-dev-release-universal.apk")
        }
        proUniversalApkOfAab {
            sourceFile = file("${project.rootDir}/app/build/from-aab/app-pro-release-universal.apk")
        }
    }
}

def buildDevUniversalApk = project.tasks.create("buildUniversalApk", DefaultTask.class) {
    dependsOn("bundleDevRelease")
    doLast {
        def proc = "${rootProject.projectDir}/bundle_universal_apk.bash app/build/outputs/bundle/devRelease/app-dev-release.aab app/build/from-aab/app-dev-release-universal.apk".execute([], rootProject.projectDir)
        if (proc.waitFor() != 0) {
            throw new IllegalStateException(proc.err.text)
        }
    }
}

project.afterEvaluate {
    project.tasks.named("uploadDeployGateDevUniversalApkOfAab").configure { dgTask ->
        dgTask.dependsOn(buildDevUniversalApk)
    }
}

kapt {
    javacOptions {
        option("-Xmaxerrs", 50000)
    }
}

repositories {
    // Spek
    maven {
        url { 'https://dl.bintray.com/spekframework/spek' }
    }
}

dependencies {
    implementation project(":domain:analytics")
    implementation project(":domain:japaneseera")
    implementation project(':domain:usersettings')
    implementation project(':domain:datestr')
    implementation project(":data:remoteconfig")

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.preference:preference:1.1.0'
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'com.nagopy.android:overlayviewmanager:1.3.0'

    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    implementation('com.crashlytics.sdk.android:crashlytics:2.9.2@aar') {
        transitive = true
    }
    implementation 'com.google.android.gms:play-services-oss-licenses:17.0.0'

    testImplementation 'junit:junit:4.12'
    testImplementation "org.robolectric:robolectric:4.1"
    testImplementation 'org.mockito:mockito-core:2.19.0'
    testImplementation 'androidx.test:core:1.2.0'
    testImplementation 'androidx.test.ext:junit:1.1.1'
    testImplementation 'androidx.test:runner:1.2.0'
    testImplementation 'androidx.test:rules:1.2.0'
    testImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    kaptTest "com.google.dagger:dagger-compiler:$dagger_version"
    kaptTest "com.google.dagger:dagger-android-processor:$dagger_version"

    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

apply plugin: 'com.google.gms.google-services'
